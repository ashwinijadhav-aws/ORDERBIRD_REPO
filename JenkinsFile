pipeline {
  agent any 
  tools { maven 'Maven_Local' }
  parameters {
        string(defaultValue: "https://github.com/ashwinijadhav-aws/ORDERBIRD_K8S_MANIFEST_REPO", description: 'k8s manifest repo url', name: 'k8s_manifest_repo_url')
        string(defaultValue: "ORDERBIRD_K8S_MANIFEST_REPO", description: 'k8s manifest repo name', name: 'k8s_manifest_repo_name')
        string(defaultValue: 'main', description: 'k8s manifest branch name', name: 'branchName')
        string(defaultValue: "http://18.199.107.248:9000", description: 'sonar url ', name: 'sonar_url')
         string(defaultValue: "ashwinijadhavaws/orderbird-app-prod-image", description: 'docker image name', name: 'docker_image_name')
        string(defaultValue: "ashwinijadhavaws", description: 'dockerhub user name', name: 'dockerhub_user_name')
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        sh 'printenv'
        //git branch: 'main', url: 'https://github.com/ashwinijadhav-aws/ORDERBIRD_K8S_ARGOCD'
      }
    } 
    stage('Build') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
   stage('Static Code Analysis') {
      environment {
        SONAR_URL = "${params.sonar_url}"
      }
      steps {
        sh 'echo ${SONAR_URL}'
        withCredentials([string(credentialsId: 'sonar-cred', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build Docker Image') {
        environment {
          DOCKER_IMAGE = "${params.docker_image_name}:${BUILD_NUMBER}"
        }
        steps {
          script {
              sh 'docker build -t ${DOCKER_IMAGE} .'
              }
          }
    }
    stage('Scan image with Trivy') {
            steps {
              //  sh 'trivy image --exit-code 1 --ignore-unfixed --severity HIGH,CRITICAL --format json --output results.json ashwinijadhavaws/orderbird-app-prod-image:${BUILD_NUMBER}'
              sh 'trivy image --exit-code 1  --severity HIGH,CRITICAL  --format json --output results.json --ignorefile .trivyignore ashwinijadhavaws/orderbird-app-prod-image:${BUILD_NUMBER}'

            }
    }
    stage('Push Docker Image') {
            environment {
              REGISTRY_CREDENTIALS = credentials('docker-cred')
              DOCKER_IMAGE = "${params.docker_image_name}:${BUILD_NUMBER}"
            }
            steps {
              script {
                      def dockerImage = docker.image("${DOCKER_IMAGE}")
                      docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                      dockerImage.push()
                  }
              }
           }
   }

  stage('Clone k8s repository') {
            steps {
                git branch: 'main', url: "${params.k8s_manifest_repo_url}"

            }
    }

   stage('Update k8s manifest Deployment File') {
        environment {
            GIT_REPO_NAME = "${params.k8s_manifest_repo_name}"
            GIT_USER_NAME = "ashwinijadhav-aws"
        }
        steps {
            withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "ashwinijadhav243@gmail.com"
                    git config user.name "ashwinijadhav-aws"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s|image: ashwinijadhavaws/orderbird-app-prod-image.*|image: ashwinijadhavaws/orderbird-app-prod-image:${BUILD_NUMBER}|g" SPRING-BOOT-APP-MANIFEST/app_deployment.yml
                    git add .
                    cat SPRING-BOOT-APP-MANIFEST/app_deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}" HEAD:main
                '''

            }
  }
   
  }
  }

   post {
        always {
                archiveArtifacts artifacts: "results.json", fingerprint: true
            }
        } 
}
